"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printableStringToPaddedBytes = exports.paddedBytesToPrintableString = void 0;
const printable_char_map_1 = require("./printable-char-map");
function uint8blockToString(a, b, c, d) {
    const n = (a * (256 ** 3)) + (b * (256 ** 2)) + (c * 256) + d;
    const k = Math.floor(n / (94 ** 4));
    const w = Math.floor(n / (94 ** 3)) % 94;
    const x = Math.floor(n / (94 ** 2)) % 94;
    const y = Math.floor(n / 94) % 94;
    const z = n % 94;
    return (printable_char_map_1.CHARS[k] +
        printable_char_map_1.CHARS[w] +
        printable_char_map_1.CHARS[x] +
        printable_char_map_1.CHARS[y] +
        printable_char_map_1.CHARS[z]);
}
/**
 * Assumes the provided array has length multiple of 4 and each element is a natural number from 0 to 255 (inclusive).
 */
function paddedBytesToPrintableString(values) {
    if (values.length % 4 !== 0) {
        throw new Error(`The length of the array must be multiple of 4, but got length equal to ${values.length}`);
    }
    const resultParts = [];
    for (let i = 0; i < values.length; i += 4) {
        resultParts.push(uint8blockToString(values[i], values[i + 1], values[i + 2], values[i + 3]));
    }
    return resultParts.join('');
}
exports.paddedBytesToPrintableString = paddedBytesToPrintableString;
/**
 * Assumes the provided string has length multiple of 5 and each character is one of the 94 non-space printable ASCII characters.
 */
function printableStringToPaddedBytes(string) {
    if (string.length % 5 !== 0) {
        throw new Error(`The length of the string must be multiple of 5, but got length equal to ${string.length}`);
    }
    const result = [];
    for (let i = 0; i < string.length; i += 5) {
        const n = (printable_char_map_1.REVERSE_CHAR_MAP[string[i]] * (94 ** 4) +
            printable_char_map_1.REVERSE_CHAR_MAP[string[i + 1]] * (94 ** 3) +
            printable_char_map_1.REVERSE_CHAR_MAP[string[i + 2]] * (94 ** 2) +
            printable_char_map_1.REVERSE_CHAR_MAP[string[i + 3]] * 94 +
            printable_char_map_1.REVERSE_CHAR_MAP[string[i + 4]]);
        if (Number.isNaN(n)) {
            const invalidChar = printable_char_map_1.INVALID_CHAR_REGEXP.exec(string.slice(i, i + 5))[0];
            throw new Error(`The string has an invalid char: ${invalidChar}`);
        }
        result.push(Math.floor(n / (256 ** 3)));
        result.push(Math.floor(n / (256 ** 2)) % 256);
        result.push(Math.floor(n / 256) % 256);
        result.push(n % 256);
    }
    return result;
}
exports.printableStringToPaddedBytes = printableStringToPaddedBytes;
//# sourceMappingURL=convert-blocks.js.map